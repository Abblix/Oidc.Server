// Abblix OpenID Connect Server Library
// Copyright (c) 2024 by Abblix LLP
// 
// This software is provided 'as-is', without any express or implied warranty. In no
// event will the authors be held liable for any damages arising from the use of this
// software.
// 
// Permitted Use: This software is open for use and extension by non-profit,
// educational and community projects under the condition that it remains unmodified
// and used in its entirety through official Nuget packages. Any unauthorized
// modification, forking of the whole repository, or altering individual files is
// strictly prohibited to ensure development occurs solely within the official Abblix LLP
// repository.
// 
// Prohibited Actions: Redistribution, modification, incorporation of this software or
// any part thereof into other products, and creation of derivative works are not
// permitted without obtaining a commercial license from Abblix LLP.
// 
// Commercial Use: A separate license is required for commercial use, including
// functionalities extended beyond the original software. For information on obtaining
// a commercial license, please contact Abblix LLP.
// 
// Enforcement: Unauthorized redistribution, modification, or use of this software in
// other projects or products is strictly prohibited without prior written permission
// from the copyright holder. Violations may be subject to legal action.
// 
// For more information, please refer to the license agreement located at:
// https://github.com/Abblix/Oidc.Server/blob/master/README.md

using System.Text.Json.Serialization;

namespace Abblix.Oidc.Server.Mvc.Model;

/// <summary>
/// Represents an authorization response containing the result of an authorization request.
/// </summary>
public record AuthorizationResponse
{
	private static class Parameters
	{
		public const string State = "state";

		public const string Code = "code";

		public const string TokenType = "token_type";
		public const string AccessToken = "access_token";

		public const string IdToken = "id_token";

		public const string Error = "error";
		public const string ErrorDescription = "error_description";
		public const string ErrorUri = "error_uri";

		public const string Scope = "scope";
		public const string SessionState = "session_state";
	}

	/// <summary>
	/// The error code if the authorization request has failed.
	/// </summary>
	[JsonPropertyName(Parameters.Error)]
	public string? Error { init; get; }

	/// <summary>
	/// The human-readable description of the error if the authorization request has failed.
	/// </summary>
	[JsonPropertyName(Parameters.ErrorDescription)]
	public string? ErrorDescription { init; get; }

	/// <summary>
	/// The URI for more information about the error if the authorization request has failed.
	/// </summary>
	[JsonPropertyName(Parameters.ErrorUri)]
	public Uri? ErrorUri { init; get; }

	/// <summary>
	/// The state parameter that was included in the initial authorization request.
	/// </summary>
	[JsonPropertyName(Parameters.State)]
	public string? State { init; get; }

	/// <summary>
	/// The authorization code generated by the authorization server.
	/// This code is used in the authorization code flow of OAuth 2.0 to obtain an access token.
	/// </summary>
	[JsonPropertyName(Parameters.Code)]
	public string? Code { get; set; }

	/// <summary>
	/// The OAuth 2.0 Token Type value.
	/// The value is typically 'Bearer', but it can be another token_type value negotiated with the Authorization Server.
	/// This is included when an access_token is issued.
	/// </summary>
	[JsonPropertyName(Parameters.TokenType)]
	public string? TokenType { get; init; }

	/// <summary>
	/// The access token issued by the authorization server.
	/// Access tokens are credentials used to access protected resources.
	/// </summary>
	[JsonPropertyName(Parameters.AccessToken)]
	public string? AccessToken { get; set; }

	/// <summary>
	/// The ID token issued by the authorization server in OpenID Connect flows.
	/// It contains claims about the authentication of an end-user.
	/// </summary>
	[JsonPropertyName(Parameters.IdToken)]
	public string? IdToken { get; set; }

	/// <summary>
	/// The scopes granted by the authorization server.
	/// These scopes determine the level of access granted to the access token.
	/// </summary>
	[JsonPropertyName(Parameters.Scope)]
	public string? Scope { get; set; }

	/// <summary>
	/// The session state, which may be used in OpenID Connect session management
	/// to maintain state between the client and the authorization server.
	/// </summary>
	[JsonPropertyName(Parameters.SessionState)]
	public string? SessionState { get; set; }
}
