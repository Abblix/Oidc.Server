// Abblix OIDC Server Library
// Copyright (c) Abblix LLP. All rights reserved.
// 
// DISCLAIMER: This software is provided 'as-is', without any express or implied
// warranty. Use at your own risk. Abblix LLP is not liable for any damages
// arising from the use of this software.
// 
// LICENSE RESTRICTIONS: This code may not be modified, copied, or redistributed
// in any form outside of the official GitHub repository at:
// https://github.com/Abblix/OIDC.Server. All development and modifications
// must occur within the official repository and are managed solely by Abblix LLP.
// 
// Unauthorized use, modification, or distribution of this software is strictly
// prohibited and may be subject to legal action.
// 
// For full licensing terms, please visit:
// 
// https://oidc.abblix.com/license
// 
// CONTACT: For license inquiries or permissions, contact Abblix LLP at
// info@abblix.com

using Abblix.Oidc.Server.Common;
using Abblix.Oidc.Server.Features.ClientInformation;
using Abblix.Oidc.Server.Features.UserAuthentication;

namespace Abblix.Oidc.Server.Features.Tokens;

/// <summary>
/// Provides functionality for creating and managing identity tokens as part of OpenID Connect authentication processes.
/// This service is responsible for generating identity tokens that encapsulate the authenticated user's identity
/// information and any additional claims or information authorized for release to the requesting client application.
/// </summary>
public interface IIdentityTokenService
{
	/// <summary>
	/// Asynchronously generates a new identity token based on the provided authentication session, authorization
	/// context, client information, and optionally includes `c_hash` or `at_hash` claims when an authorization code or
	/// access token is provided. These claims are used for validating the hash of the authorization code and
	/// access token respectively, enhancing the security of token exchange in OAuth 2.0 flows.
	/// </summary>
    /// <param name="authSession">The authentication session, which includes details such as the user's unique
    /// identifier and the session's authentication time.</param>
    /// <param name="authContext">The authorization context, providing contextual information about the authorization
    /// request, such as the requested scopes and additional claims to be included in the identity token.</param>
    /// <param name="clientInfo">Detailed information about the client that is requesting the identity token, including
    /// its identifier and specific requirements for the token.</param>
    /// <param name="includeUserClaims">A boolean value indicating whether claims about the user should be included
    /// in the identity token. When set to <c>true</c>, the token will include claims based on the requested scopes
    /// and additional specified claims.</param>
    /// <param name="authorizationCode">An optional authorization code provided to include the `c_hash` claim in the
    /// identity token, which is a hash of the code. This parameter is typically used in authorization code flow.
    /// </param>
    /// <param name="accessToken">An optional access token provided to include the `at_hash` claim in the identity token,
    /// which is a hash of the token. This parameter is used when the identity token is issued alongside an access token.
    /// </param>
    /// <returns>A task that, upon completion, yields an <see cref="EncodedJsonWebToken"/> that represents the newly
    /// generated identity token, encoded and ready for transmission to the client.</returns>
    /// <remarks>
    /// Identity tokens generated by this service adhere to the OpenID Connect standard, ensuring that they can be used
    /// reliably in identity assertions across different clients and services that support OpenID Connect.
    /// </remarks>
	Task<EncodedJsonWebToken?> CreateIdentityTokenAsync(
		AuthSession authSession,
		AuthorizationContext authContext,
		ClientInfo clientInfo,
		bool includeUserClaims,
		string? authorizationCode,
		string? accessToken);
}
